// To parse this JSON data, do
//
//     final usersDataModel = usersDataModelFromJson(jsonString);

import 'dart:convert';

UsersDataModel usersDataModelFromJson(String str) => UsersDataModel.fromJson(json.decode(str));

String usersDataModelToJson(UsersDataModel data) => json.encode(data.toJson());

class UsersDataModel {
    UsersDataModel({
        required this.contentTypeId,
        required this.title,
        required this.moderationComments,
        required this.linkTitleNoMenu,
        required this.linkTitle,
        required this.linkTitle2,
        required this.fileX0020Type,
        required this.htmlX0020FileX0020TypeFileX0020TypeMapall,
        required this.htmlX0020FileX0020TypeFileX0020TypeMapcon,
        required this.htmlX0020FileX0020TypeFileX0020TypeMapico,
        required this.complianceAssetId,
        required this.relatedPerson,
        required this.relatedPersonId,
        required this.relatedPersonTitle,
        required this.relatedPersonSpan,
        required this.relatedPersonEmail,
        required this.relatedPersonSip,
        required this.relatedPersonJobTitle,
        required this.relatedPersonDepartment,
        required this.relatedPersonPicture,
        required this.praiseUponRequest,
        required this.praiseUponRequestValue,
        required this.praiseRating,
        required this.usersDataModelPraiseRating,
        required this.message,
        required this.badge,
        required this.usersDataModelBadge,
        required this.author,
        required this.authorId,
        required this.authorTitle,
        required this.authorSpan,
        required this.authorEmail,
        required this.authorSip,
        required this.authorJobTitle,
        required this.authorDepartment,
        required this.authorPicture,
        required this.created,
        required this.usersDataModelCreated,
        required this.id,
        required this.contentType,
        required this.modified,
        required this.usersDataModelModified,
        required this.editor,
        required this.editorId,
        required this.editorTitle,
        required this.editorSpan,
        required this.editorEmail,
        required this.editorSip,
        required this.editorJobTitle,
        required this.editorDepartment,
        required this.editorPicture,
        required this.hasCopyDestinations,
        required this.hasCopyDestinationsValue,
        required this.copySource,
        required this.owshiddenversion,
        required this.workflowVersion,
        required this.uiVersion,
        required this.uiVersionString,
        required this.attachments,
        required this.moderationStatus,
        required this.usersDataModelModerationStatus,
        required this.selectTitle,
        required this.instanceId,
        required this.order,
        required this.usersDataModelOrder,
        required this.guid,
        required this.workflowInstanceId,
        required this.fileRef,
        required this.fileRefUrlencode,
        required this.fileRefUrlencodeasurl,
        required this.fileRefUrlencoding,
        required this.fileRefScriptencodeasurl,
        required this.fileDirRef,
        required this.lastX0020Modified,
        required this.createdX0020Date,
        required this.createdX0020DateIfnew,
        required this.fsObjType,
        required this.sortBehavior,
        required this.permMask,
        required this.principalCount,
        required this.fileLeafRef,
        required this.fileLeafRefName,
        required this.fileLeafRefSuffix,
        required this.uniqueId,
        required this.syncClientId,
        required this.progId,
        required this.scopeId,
        required this.htmlX0020FileX0020Type,
        required this.editMenuTableStart,
        required this.editMenuTableStart2,
        required this.editMenuTableEnd,
        required this.linkFilenameNoMenu,
        required this.linkFilename,
        required this.linkFilename2,
        required this.docIcon,
        required this.serverUrl,
        required this.encodedAbsUrl,
        required this.baseName,
        required this.metaInfo,
        required this.usersDataModelMetaInfo,
        required this.level,
        required this.isCurrentVersion,
        required this.isCurrentVersionValue,
        required this.itemChildCount,
        required this.folderChildCount,
        required this.restricted,
        required this.originatorId,
        required this.noExecute,
        required this.contentVersion,
        required this.complianceFlags,
        required this.complianceTag,
        required this.complianceTagWrittenTime,
        required this.complianceTagUserId,
        required this.isRecord,
        required this.accessPolicy,
        required this.virusStatus,
        required this.virusVendorId,
        required this.virusInfo,
        required this.appAuthor,
        required this.appEditor,
        required this.smTotalSize,
        required this.smLastModifiedDate,
        required this.smTotalFileStreamSize,
        required this.smTotalFileCount,
        required this.commentFlags,
        required this.commentCount,
    });

    String contentTypeId;
    String title;
    String moderationComments;
    String linkTitleNoMenu;
    String linkTitle;
    String linkTitle2;
    String fileX0020Type;
    String htmlX0020FileX0020TypeFileX0020TypeMapall;
    String htmlX0020FileX0020TypeFileX0020TypeMapcon;
    String htmlX0020FileX0020TypeFileX0020TypeMapico;
    String complianceAssetId;
    List<Author> relatedPerson;
    String relatedPersonId;
    String relatedPersonTitle;
    String relatedPersonSpan;
    String relatedPersonEmail;
    String relatedPersonSip;
    String relatedPersonJobTitle;
    String relatedPersonDepartment;
    String relatedPersonPicture;
    String praiseUponRequest;
    String praiseUponRequestValue;
    String praiseRating;
    String usersDataModelPraiseRating;
    String message;
    List<Badge> badge;
    String usersDataModelBadge;
    List<Author> author;
    String authorId;
    String authorTitle;
    String authorSpan;
    String authorEmail;
    String authorSip;
    String authorJobTitle;
    String authorDepartment;
    String authorPicture;
    String created;
    DateTime usersDataModelCreated;
    String id;
    String contentType;
    String modified;
    DateTime usersDataModelModified;
    List<Author> editor;
    String editorId;
    String editorTitle;
    String editorSpan;
    String editorEmail;
    String editorSip;
    String editorJobTitle;
    String editorDepartment;
    String editorPicture;
    String hasCopyDestinations;
    String hasCopyDestinationsValue;
    String copySource;
    String owshiddenversion;
    String workflowVersion;
    String uiVersion;
    String uiVersionString;
    String attachments;
    String moderationStatus;
    String usersDataModelModerationStatus;
    String selectTitle;
    String instanceId;
    String order;
    String usersDataModelOrder;
    String guid;
    String workflowInstanceId;
    String fileRef;
    String fileRefUrlencode;
    String fileRefUrlencodeasurl;
    String fileRefUrlencoding;
    String fileRefScriptencodeasurl;
    String fileDirRef;
    String lastX0020Modified;
    String createdX0020Date;
    String createdX0020DateIfnew;
    String fsObjType;
    String sortBehavior;
    String permMask;
    String principalCount;
    String fileLeafRef;
    String fileLeafRefName;
    String fileLeafRefSuffix;
    String uniqueId;
    String syncClientId;
    String progId;
    String scopeId;
    String htmlX0020FileX0020Type;
    String editMenuTableStart;
    String editMenuTableStart2;
    String editMenuTableEnd;
    String linkFilenameNoMenu;
    String linkFilename;
    String linkFilename2;
    String docIcon;
    String serverUrl;
    String encodedAbsUrl;
    String baseName;
    List<Badge> metaInfo;
    String usersDataModelMetaInfo;
    String level;
    String isCurrentVersion;
    String isCurrentVersionValue;
    String itemChildCount;
    String folderChildCount;
    String restricted;
    String originatorId;
    String noExecute;
    String contentVersion;
    String complianceFlags;
    String complianceTag;
    String complianceTagWrittenTime;
    String complianceTagUserId;
    String isRecord;
    String accessPolicy;
    String virusStatus;
    String virusVendorId;
    String virusInfo;
    String appAuthor;
    String appEditor;
    String smTotalSize;
    String smLastModifiedDate;
    String smTotalFileStreamSize;
    String smTotalFileCount;
    String commentFlags;
    String commentCount;

    factory UsersDataModel.fromJson(Map<String, dynamic> json) => UsersDataModel(
        contentTypeId: json["ContentTypeId"],
        title: json["Title"],
        moderationComments: json["_ModerationComments"],
        linkTitleNoMenu: json["LinkTitleNoMenu"],
        linkTitle: json["LinkTitle"],
        linkTitle2: json["LinkTitle2"],
        fileX0020Type: json["File_x0020_Type"],
        htmlX0020FileX0020TypeFileX0020TypeMapall: json["HTML_x0020_File_x0020_Type.File_x0020_Type.mapall"],
        htmlX0020FileX0020TypeFileX0020TypeMapcon: json["HTML_x0020_File_x0020_Type.File_x0020_Type.mapcon"],
        htmlX0020FileX0020TypeFileX0020TypeMapico: json["HTML_x0020_File_x0020_Type.File_x0020_Type.mapico"],
        complianceAssetId: json["ComplianceAssetId"],
        relatedPerson: List<Author>.from(json["RelatedPerson"].map((x) => Author.fromJson(x))),
        relatedPersonId: json["RelatedPerson.id"],
        relatedPersonTitle: json["RelatedPerson.title"],
        relatedPersonSpan: json["RelatedPerson.span"],
        relatedPersonEmail: json["RelatedPerson.email"],
        relatedPersonSip: json["RelatedPerson.sip"],
        relatedPersonJobTitle: json["RelatedPerson.jobTitle"],
        relatedPersonDepartment: json["RelatedPerson.department"],
        relatedPersonPicture: json["RelatedPerson.picture"],
        praiseUponRequest: json["PraiseUponRequest"],
        praiseUponRequestValue: json["PraiseUponRequest.value"],
        praiseRating: json["PraiseRating"],
        usersDataModelPraiseRating: json["PraiseRating."],
        message: json["Message"],
        badge: List<Badge>.from(json["Badge"].map((x) => Badge.fromJson(x))),
        usersDataModelBadge: json["Badge."],
        author: List<Author>.from(json["Author"].map((x) => Author.fromJson(x))),
        authorId: json["Author.id"],
        authorTitle: json["Author.title"],
        authorSpan: json["Author.span"],
        authorEmail: json["Author.email"],
        authorSip: json["Author.sip"],
        authorJobTitle: json["Author.jobTitle"],
        authorDepartment: json["Author.department"],
        authorPicture: json["Author.picture"],
        created: json["Created"],
        usersDataModelCreated: DateTime.parse(json["Created."]),
        id: json["ID"],
        contentType: json["ContentType"],
        modified: json["Modified"],
        usersDataModelModified: DateTime.parse(json["Modified."]),
        editor: List<Author>.from(json["Editor"].map((x) => Author.fromJson(x))),
        editorId: json["Editor.id"],
        editorTitle: json["Editor.title"],
        editorSpan: json["Editor.span"],
        editorEmail: json["Editor.email"],
        editorSip: json["Editor.sip"],
        editorJobTitle: json["Editor.jobTitle"],
        editorDepartment: json["Editor.department"],
        editorPicture: json["Editor.picture"],
        hasCopyDestinations: json["_HasCopyDestinations"],
        hasCopyDestinationsValue: json["_HasCopyDestinations.value"],
        copySource: json["_CopySource"],
        owshiddenversion: json["owshiddenversion"],
        workflowVersion: json["WorkflowVersion"],
        uiVersion: json["_UIVersion"],
        uiVersionString: json["_UIVersionString"],
        attachments: json["Attachments"],
        moderationStatus: json["_ModerationStatus"],
        usersDataModelModerationStatus: json["_ModerationStatus."],
        selectTitle: json["SelectTitle"],
        instanceId: json["InstanceID"],
        order: json["Order"],
        usersDataModelOrder: json["Order."],
        guid: json["GUID"],
        workflowInstanceId: json["WorkflowInstanceID"],
        fileRef: json["FileRef"],
        fileRefUrlencode: json["FileRef.urlencode"],
        fileRefUrlencodeasurl: json["FileRef.urlencodeasurl"],
        fileRefUrlencoding: json["FileRef.urlencoding"],
        fileRefScriptencodeasurl: json["FileRef.scriptencodeasurl"],
        fileDirRef: json["FileDirRef"],
        lastX0020Modified: json["Last_x0020_Modified"],
        createdX0020Date: json["Created_x0020_Date"],
        createdX0020DateIfnew: json["Created_x0020_Date.ifnew"],
        fsObjType: json["FSObjType"],
        sortBehavior: json["SortBehavior"],
        permMask: json["PermMask"],
        principalCount: json["PrincipalCount"],
        fileLeafRef: json["FileLeafRef"],
        fileLeafRefName: json["FileLeafRef.Name"],
        fileLeafRefSuffix: json["FileLeafRef.Suffix"],
        uniqueId: json["UniqueId"],
        syncClientId: json["SyncClientId"],
        progId: json["ProgId"],
        scopeId: json["ScopeId"],
        htmlX0020FileX0020Type: json["HTML_x0020_File_x0020_Type"],
        editMenuTableStart: json["_EditMenuTableStart"],
        editMenuTableStart2: json["_EditMenuTableStart2"],
        editMenuTableEnd: json["_EditMenuTableEnd"],
        linkFilenameNoMenu: json["LinkFilenameNoMenu"],
        linkFilename: json["LinkFilename"],
        linkFilename2: json["LinkFilename2"],
        docIcon: json["DocIcon"],
        serverUrl: json["ServerUrl"],
        encodedAbsUrl: json["EncodedAbsUrl"],
        baseName: json["BaseName"],
        metaInfo: List<Badge>.from(json["MetaInfo"].map((x) => Badge.fromJson(x))),
        usersDataModelMetaInfo: json["MetaInfo."],
        level: json["_Level"],
        isCurrentVersion: json["_IsCurrentVersion"],
        isCurrentVersionValue: json["_IsCurrentVersion.value"],
        itemChildCount: json["ItemChildCount"],
        folderChildCount: json["FolderChildCount"],
        restricted: json["Restricted"],
        originatorId: json["OriginatorId"],
        noExecute: json["NoExecute"],
        contentVersion: json["ContentVersion"],
        complianceFlags: json["_ComplianceFlags"],
        complianceTag: json["_ComplianceTag"],
        complianceTagWrittenTime: json["_ComplianceTagWrittenTime"],
        complianceTagUserId: json["_ComplianceTagUserId"],
        isRecord: json["_IsRecord"],
        accessPolicy: json["AccessPolicy"],
        virusStatus: json["_VirusStatus"],
        virusVendorId: json["_VirusVendorID"],
        virusInfo: json["_VirusInfo"],
        appAuthor: json["AppAuthor"],
        appEditor: json["AppEditor"],
        smTotalSize: json["SMTotalSize"],
        smLastModifiedDate: json["SMLastModifiedDate"],
        smTotalFileStreamSize: json["SMTotalFileStreamSize"],
        smTotalFileCount: json["SMTotalFileCount"],
        commentFlags: json["_CommentFlags"],
        commentCount: json["_CommentCount"],
    );

    Map<String, dynamic> toJson() => {
        "ContentTypeId": contentTypeId,
        "Title": title,
        "_ModerationComments": moderationComments,
        "LinkTitleNoMenu": linkTitleNoMenu,
        "LinkTitle": linkTitle,
        "LinkTitle2": linkTitle2,
        "File_x0020_Type": fileX0020Type,
        "HTML_x0020_File_x0020_Type.File_x0020_Type.mapall": htmlX0020FileX0020TypeFileX0020TypeMapall,
        "HTML_x0020_File_x0020_Type.File_x0020_Type.mapcon": htmlX0020FileX0020TypeFileX0020TypeMapcon,
        "HTML_x0020_File_x0020_Type.File_x0020_Type.mapico": htmlX0020FileX0020TypeFileX0020TypeMapico,
        "ComplianceAssetId": complianceAssetId,
        "RelatedPerson": List<dynamic>.from(relatedPerson.map((x) => x.toJson())),
        "RelatedPerson.id": relatedPersonId,
        "RelatedPerson.title": relatedPersonTitle,
        "RelatedPerson.span": relatedPersonSpan,
        "RelatedPerson.email": relatedPersonEmail,
        "RelatedPerson.sip": relatedPersonSip,
        "RelatedPerson.jobTitle": relatedPersonJobTitle,
        "RelatedPerson.department": relatedPersonDepartment,
        "RelatedPerson.picture": relatedPersonPicture,
        "PraiseUponRequest": praiseUponRequest,
        "PraiseUponRequest.value": praiseUponRequestValue,
        "PraiseRating": praiseRating,
        "PraiseRating.": usersDataModelPraiseRating,
        "Message": message,
        "Badge": List<dynamic>.from(badge.map((x) => x.toJson())),
        "Badge.": usersDataModelBadge,
        "Author": List<dynamic>.from(author.map((x) => x.toJson())),
        "Author.id": authorId,
        "Author.title": authorTitle,
        "Author.span": authorSpan,
        "Author.email": authorEmail,
        "Author.sip": authorSip,
        "Author.jobTitle": authorJobTitle,
        "Author.department": authorDepartment,
        "Author.picture": authorPicture,
        "Created": created,
        "Created.": usersDataModelCreated.toIso8601String(),
        "ID": id,
        "ContentType": contentType,
        "Modified": modified,
        "Modified.": usersDataModelModified.toIso8601String(),
        "Editor": List<dynamic>.from(editor.map((x) => x.toJson())),
        "Editor.id": editorId,
        "Editor.title": editorTitle,
        "Editor.span": editorSpan,
        "Editor.email": editorEmail,
        "Editor.sip": editorSip,
        "Editor.jobTitle": editorJobTitle,
        "Editor.department": editorDepartment,
        "Editor.picture": editorPicture,
        "_HasCopyDestinations": hasCopyDestinations,
        "_HasCopyDestinations.value": hasCopyDestinationsValue,
        "_CopySource": copySource,
        "owshiddenversion": owshiddenversion,
        "WorkflowVersion": workflowVersion,
        "_UIVersion": uiVersion,
        "_UIVersionString": uiVersionString,
        "Attachments": attachments,
        "_ModerationStatus": moderationStatus,
        "_ModerationStatus.": usersDataModelModerationStatus,
        "SelectTitle": selectTitle,
        "InstanceID": instanceId,
        "Order": order,
        "Order.": usersDataModelOrder,
        "GUID": guid,
        "WorkflowInstanceID": workflowInstanceId,
        "FileRef": fileRef,
        "FileRef.urlencode": fileRefUrlencode,
        "FileRef.urlencodeasurl": fileRefUrlencodeasurl,
        "FileRef.urlencoding": fileRefUrlencoding,
        "FileRef.scriptencodeasurl": fileRefScriptencodeasurl,
        "FileDirRef": fileDirRef,
        "Last_x0020_Modified": lastX0020Modified,
        "Created_x0020_Date": createdX0020Date,
        "Created_x0020_Date.ifnew": createdX0020DateIfnew,
        "FSObjType": fsObjType,
        "SortBehavior": sortBehavior,
        "PermMask": permMask,
        "PrincipalCount": principalCount,
        "FileLeafRef": fileLeafRef,
        "FileLeafRef.Name": fileLeafRefName,
        "FileLeafRef.Suffix": fileLeafRefSuffix,
        "UniqueId": uniqueId,
        "SyncClientId": syncClientId,
        "ProgId": progId,
        "ScopeId": scopeId,
        "HTML_x0020_File_x0020_Type": htmlX0020FileX0020Type,
        "_EditMenuTableStart": editMenuTableStart,
        "_EditMenuTableStart2": editMenuTableStart2,
        "_EditMenuTableEnd": editMenuTableEnd,
        "LinkFilenameNoMenu": linkFilenameNoMenu,
        "LinkFilename": linkFilename,
        "LinkFilename2": linkFilename2,
        "DocIcon": docIcon,
        "ServerUrl": serverUrl,
        "EncodedAbsUrl": encodedAbsUrl,
        "BaseName": baseName,
        "MetaInfo": List<dynamic>.from(metaInfo.map((x) => x.toJson())),
        "MetaInfo.": usersDataModelMetaInfo,
        "_Level": level,
        "_IsCurrentVersion": isCurrentVersion,
        "_IsCurrentVersion.value": isCurrentVersionValue,
        "ItemChildCount": itemChildCount,
        "FolderChildCount": folderChildCount,
        "Restricted": restricted,
        "OriginatorId": originatorId,
        "NoExecute": noExecute,
        "ContentVersion": contentVersion,
        "_ComplianceFlags": complianceFlags,
        "_ComplianceTag": complianceTag,
        "_ComplianceTagWrittenTime": complianceTagWrittenTime,
        "_ComplianceTagUserId": complianceTagUserId,
        "_IsRecord": isRecord,
        "AccessPolicy": accessPolicy,
        "_VirusStatus": virusStatus,
        "_VirusVendorID": virusVendorId,
        "_VirusInfo": virusInfo,
        "AppAuthor": appAuthor,
        "AppEditor": appEditor,
        "SMTotalSize": smTotalSize,
        "SMLastModifiedDate": smLastModifiedDate,
        "SMTotalFileStreamSize": smTotalFileStreamSize,
        "SMTotalFileCount": smTotalFileCount,
        "_CommentFlags": commentFlags,
        "_CommentCount": commentCount,
    };
}

class Author {
    Author({
        required this.id,
        required this.title,
        required this.email,
        required this.sip,
        required this.picture,
    });

    String id;
    String title;
    String email;
    String sip;
    String picture;

    factory Author.fromJson(Map<String, dynamic> json) => Author(
        id: json["id"],
        title: json["title"],
        email: json["email"],
        sip: json["sip"],
        picture: json["picture"],
    );

    Map<String, dynamic> toJson() => {
        "id": id,
        "title": title,
        "email": email,
        "sip": sip,
        "picture": picture,
    };
}

class Badge {
    Badge({
        required this.lookupId,
        required this.lookupValue,
        required this.isSecretFieldValue,
    });

    int lookupId;
    String lookupValue;
    bool isSecretFieldValue;

    factory Badge.fromJson(Map<String, dynamic> json) => Badge(
        lookupId: json["lookupId"],
        lookupValue: json["lookupValue"],
        isSecretFieldValue: json["isSecretFieldValue"],
    );

    Map<String, dynamic> toJson() => {
        "lookupId": lookupId,
        "lookupValue": lookupValue,
        "isSecretFieldValue": isSecretFieldValue,
    };
}
